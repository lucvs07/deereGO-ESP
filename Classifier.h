#ifndef UUID140426584470912
#define UUID140426584470912
  /** * RandomForestClassifier(base_estimator=DecisionTreeClassifier(), bootstrap=True, ccp_alpha=0.0, class_name=RandomForestClassifier, class_weight=None, criterion=gini, estimator_params=('criterion', 'max_depth', 'min_samples_split', 'min_samples_leaf', 'min_weight_fraction_leaf', 'max_features', 'max_leaf_nodes', 'min_impurity_decrease', 'min_impurity_split', 'random_state', 'ccp_alpha'), max_depth=8, max_features=auto, max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=None, num_outputs=2, oob_score=False, package_name=everywhereml.sklearn.ensemble, random_state=None, template_folder=everywhereml/sklearn/ensemble, verbose=0, warm_start=False) */ class Classifier { public:  /** * Predict class from features */ int predict(float *x) { int predictedValue = 0; size_t startedAt = micros();    uint16_t votes[2] = { 0 }; uint8_t classIdx = 0; float classScore = 0;   tree0(x, &classIdx, &classScore); votes[classIdx] += classScore;  tree1(x, &classIdx, &classScore); votes[classIdx] += classScore;  tree2(x, &classIdx, &classScore); votes[classIdx] += classScore;  tree3(x, &classIdx, &classScore); votes[classIdx] += classScore;  tree4(x, &classIdx, &classScore); votes[classIdx] += classScore;  tree5(x, &classIdx, &classScore); votes[classIdx] += classScore;  tree6(x, &classIdx, &classScore); votes[classIdx] += classScore;  tree7(x, &classIdx, &classScore); votes[classIdx] += classScore;  tree8(x, &classIdx, &classScore); votes[classIdx] += classScore;  tree9(x, &classIdx, &classScore); votes[classIdx] += classScore;   uint8_t maxClassIdx = 0; float maxVote = votes[0];  for (uint8_t i = 1; i < 2; i++) { if (votes[i] > maxVote) { maxClassIdx = i; maxVote = votes[i]; } }  predictedValue = maxClassIdx;    latency = micros() - startedAt;  return (lastPrediction = predictedValue); }    /** * Get latency in micros */ uint32_t latencyInMicros() { return latency; }  /** * Get latency in millis */ uint16_t latencyInMillis() { return latency / 1000; }   protected: float latency = 0; int lastPrediction = 0;      /** * Random forest's tree #0 */ void tree0(float *x, uint8_t *classIdx, float *classScore) {  if (x[22] < -58.5) {  *classIdx = 0; *classScore = 16.0; return;  } else {  *classIdx = 1; *classScore = 51.0; return;  }  }    /** * Random forest's tree #1 */ void tree1(float *x, uint8_t *classIdx, float *classScore) {  if (x[22] < -58.5) {  *classIdx = 0; *classScore = 28.0; return;  } else {  *classIdx = 1; *classScore = 39.0; return;  }  }    /** * Random forest's tree #2 */ void tree2(float *x, uint8_t *classIdx, float *classScore) {  if (x[35] < -39.5) {  *classIdx = 0; *classScore = 24.0; return;  } else {  *classIdx = 1; *classScore = 43.0; return;  }  }    /** * Random forest's tree #3 */ void tree3(float *x, uint8_t *classIdx, float *classScore) {  if (x[23] < -40.0) {  *classIdx = 0; *classScore = 18.0; return;  } else {  if (x[14] < -41.0) {  *classIdx = 0; *classScore = 18.0; return;  } else {  *classIdx = 1; *classScore = 49.0; return;  }  }  }    /** * Random forest's tree #4 */ void tree4(float *x, uint8_t *classIdx, float *classScore) {  if (x[35] < -39.5) {  *classIdx = 0; *classScore = 24.0; return;  } else {  *classIdx = 1; *classScore = 43.0; return;  }  }    /** * Random forest's tree #5 */ void tree5(float *x, uint8_t *classIdx, float *classScore) {  if (x[25] < -81.5) {  *classIdx = 0; *classScore = 21.0; return;  } else {  if (x[22] < -59.0) {  *classIdx = 0; *classScore = 21.0; return;  } else {  *classIdx = 1; *classScore = 46.0; return;  }  }  }    /** * Random forest's tree #6 */ void tree6(float *x, uint8_t *classIdx, float *classScore) {  if (x[23] < -40.0) {  *classIdx = 0; *classScore = 19.0; return;  } else {  *classIdx = 1; *classScore = 48.0; return;  }  }    /** * Random forest's tree #7 */ void tree7(float *x, uint8_t *classIdx, float *classScore) {  if (x[23] < -40.0) {  *classIdx = 0; *classScore = 24.0; return;  } else {  *classIdx = 1; *classScore = 43.0; return;  }  }    /** * Random forest's tree #8 */ void tree8(float *x, uint8_t *classIdx, float *classScore) {  if (x[24] < -40.5) {  *classIdx = 0; *classScore = 20.0; return;  } else {  if (x[14] < -41.0) {  *classIdx = 0; *classScore = 20.0; return;  } else {  *classIdx = 1; *classScore = 47.0; return;  }  }  }    /** * Random forest's tree #9 */ void tree9(float *x, uint8_t *classIdx, float *classScore) {  if (x[1] < -40.5) {  *classIdx = 1; *classScore = 50.0; return;  } else {  if (x[35] < -39.5) {  *classIdx = 0; *classScore = 17.0; return;  } else {  *classIdx = 1; *classScore = 50.0; return;  }  }  }     };    
#endif